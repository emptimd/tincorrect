<?php
/**
 * BulkRequestTinPairResultSharedModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TinCorrect.Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BulkRequestTinPairResultSharedModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BulkRequestTinPairResultSharedModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BulkRequestTinPairResultSharedModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tin_type' => 'int',
        'tin' => 'string',
        'name' => 'string',
        'account_number' => 'string',
        'irs_result_id' => 'int',
        'result_description' => 'string',
        'additional_results' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tin_type' => 'int32',
        'tin' => null,
        'name' => null,
        'account_number' => null,
        'irs_result_id' => 'int32',
        'result_description' => null,
        'additional_results' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tin_type' => 'TinType',
        'tin' => 'Tin',
        'name' => 'Name',
        'account_number' => 'AccountNumber',
        'irs_result_id' => 'IrsResultId',
        'result_description' => 'ResultDescription',
        'additional_results' => 'AdditionalResults'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tin_type' => 'setTinType',
        'tin' => 'setTin',
        'name' => 'setName',
        'account_number' => 'setAccountNumber',
        'irs_result_id' => 'setIrsResultId',
        'result_description' => 'setResultDescription',
        'additional_results' => 'setAdditionalResults'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tin_type' => 'getTinType',
        'tin' => 'getTin',
        'name' => 'getName',
        'account_number' => 'getAccountNumber',
        'irs_result_id' => 'getIrsResultId',
        'result_description' => 'getResultDescription',
        'additional_results' => 'getAdditionalResults'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tin_type'] = isset($data['tin_type']) ? $data['tin_type'] : null;
        $this->container['tin'] = isset($data['tin']) ? $data['tin'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['irs_result_id'] = isset($data['irs_result_id']) ? $data['irs_result_id'] : null;
        $this->container['result_description'] = isset($data['result_description']) ? $data['result_description'] : null;
        $this->container['additional_results'] = isset($data['additional_results']) ? $data['additional_results'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets tin_type
     *
     * @return int
     */
    public function getTinType()
    {
        return $this->container['tin_type'];
    }

    /**
     * Sets tin_type
     *
     * @param int $tin_type tin_type
     *
     * @return $this
     */
    public function setTinType($tin_type)
    {
        $this->container['tin_type'] = $tin_type;

        return $this;
    }

    /**
     * Gets tin
     *
     * @return string
     */
    public function getTin()
    {
        return $this->container['tin'];
    }

    /**
     * Sets tin
     *
     * @param string $tin tin
     *
     * @return $this
     */
    public function setTin($tin)
    {
        $this->container['tin'] = $tin;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string $account_number account_number
     *
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets irs_result_id
     *
     * @return int
     */
    public function getIrsResultId()
    {
        return $this->container['irs_result_id'];
    }

    /**
     * Sets irs_result_id
     *
     * @param int $irs_result_id irs_result_id
     *
     * @return $this
     */
    public function setIrsResultId($irs_result_id)
    {
        $this->container['irs_result_id'] = $irs_result_id;

        return $this;
    }

    /**
     * Gets result_description
     *
     * @return string
     */
    public function getResultDescription()
    {
        return $this->container['result_description'];
    }

    /**
     * Sets result_description
     *
     * @param string $result_description result_description
     *
     * @return $this
     */
    public function setResultDescription($result_description)
    {
        $this->container['result_description'] = $result_description;

        return $this;
    }

    /**
     * Gets additional_results
     *
     * @return string
     */
    public function getAdditionalResults()
    {
        return $this->container['additional_results'];
    }

    /**
     * Sets additional_results
     *
     * @param string $additional_results additional_results
     *
     * @return $this
     */
    public function setAdditionalResults($additional_results)
    {
        $this->container['additional_results'] = $additional_results;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


